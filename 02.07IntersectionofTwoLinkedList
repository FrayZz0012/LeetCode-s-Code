/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {//令值为负数，再遍历查找
    ListNode *p = headA;
    while(p != nullptr){
        p->val = -p->val;
        p = p->next;
    }
    p = headB;
    while(p != nullptr){
        if(p->val<0){
            break;
        }
        p = p->next;
    }
    ListNode *q = headA;
    while(q != nullptr){
        q->val = -q->val;
        q = q->next;
    }
    return p;
}
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {//先求长度差值，再对齐，判断是否有节点相同
        ListNode* curA = headA;
        ListNode* curB = headB;
        int lenA = 0, lenB = 0;
        while (curA != NULL) { // 求链表A的长度
            lenA++;
            curA = curA->next;
        }
        while (curB != NULL) { // 求链表B的长度
            lenB++;
            curB = curB->next;
        }
        curA = headA;
        curB = headB;
        // 让curA为最长链表的头，lenA为其长度
        if (lenB > lenA) {
            swap (lenA, lenB);
            swap (curA, curB);
        }
        // 求长度差
        int gap = lenA - lenB;
        // 让curA和curB在同一起点上（末尾位置对齐）
        while (gap--) {
            curA = curA->next;
        }
        // 遍历curA 和 curB，遇到相同则直接返回
        while (curA != NULL) {
            if (curA == curB) {
                return curA;
            }
            curA = curA->next;
            curB = curB->next;
        }
        return NULL;
    }
};
